/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as SearchRouteImport } from './routes/search'
import { Route as CollectionsRouteImport } from './routes/collections'
import { Route as AccountRouteImport } from './routes/account'
import { Route as IndexRouteImport } from './routes/index'
import { Route as InfoInfoIdRouteImport } from './routes/info/$infoId'
import { Route as CategoryCategoryIdRouteImport } from './routes/category/$categoryId'

const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const SearchRoute = SearchRouteImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => rootRouteImport,
} as any)
const CollectionsRoute = CollectionsRouteImport.update({
  id: '/collections',
  path: '/collections',
  getParentRoute: () => rootRouteImport,
} as any)
const AccountRoute = AccountRouteImport.update({
  id: '/account',
  path: '/account',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const InfoInfoIdRoute = InfoInfoIdRouteImport.update({
  id: '/info/$infoId',
  path: '/info/$infoId',
  getParentRoute: () => rootRouteImport,
} as any)
const CategoryCategoryIdRoute = CategoryCategoryIdRouteImport.update({
  id: '/category/$categoryId',
  path: '/category/$categoryId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/account': typeof AccountRoute
  '/collections': typeof CollectionsRoute
  '/search': typeof SearchRoute
  '/settings': typeof SettingsRoute
  '/category/$categoryId': typeof CategoryCategoryIdRoute
  '/info/$infoId': typeof InfoInfoIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/account': typeof AccountRoute
  '/collections': typeof CollectionsRoute
  '/search': typeof SearchRoute
  '/settings': typeof SettingsRoute
  '/category/$categoryId': typeof CategoryCategoryIdRoute
  '/info/$infoId': typeof InfoInfoIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/account': typeof AccountRoute
  '/collections': typeof CollectionsRoute
  '/search': typeof SearchRoute
  '/settings': typeof SettingsRoute
  '/category/$categoryId': typeof CategoryCategoryIdRoute
  '/info/$infoId': typeof InfoInfoIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/account'
    | '/collections'
    | '/search'
    | '/settings'
    | '/category/$categoryId'
    | '/info/$infoId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/account'
    | '/collections'
    | '/search'
    | '/settings'
    | '/category/$categoryId'
    | '/info/$infoId'
  id:
    | '__root__'
    | '/'
    | '/account'
    | '/collections'
    | '/search'
    | '/settings'
    | '/category/$categoryId'
    | '/info/$infoId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AccountRoute: typeof AccountRoute
  CollectionsRoute: typeof CollectionsRoute
  SearchRoute: typeof SearchRoute
  SettingsRoute: typeof SettingsRoute
  CategoryCategoryIdRoute: typeof CategoryCategoryIdRoute
  InfoInfoIdRoute: typeof InfoInfoIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/collections': {
      id: '/collections'
      path: '/collections'
      fullPath: '/collections'
      preLoaderRoute: typeof CollectionsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/account': {
      id: '/account'
      path: '/account'
      fullPath: '/account'
      preLoaderRoute: typeof AccountRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/info/$infoId': {
      id: '/info/$infoId'
      path: '/info/$infoId'
      fullPath: '/info/$infoId'
      preLoaderRoute: typeof InfoInfoIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/category/$categoryId': {
      id: '/category/$categoryId'
      path: '/category/$categoryId'
      fullPath: '/category/$categoryId'
      preLoaderRoute: typeof CategoryCategoryIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AccountRoute: AccountRoute,
  CollectionsRoute: CollectionsRoute,
  SearchRoute: SearchRoute,
  SettingsRoute: SettingsRoute,
  CategoryCategoryIdRoute: CategoryCategoryIdRoute,
  InfoInfoIdRoute: InfoInfoIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
